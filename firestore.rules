rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'administrateur';
    }

    // Fonction pour vérifier si l'utilisateur est un professionnel
    function isProfessionnel() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professionnel';
    }

    // Fonction pour vérifier si l'utilisateur est particulier
    function isParticulier() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'particulier';
    }

    // Fonction pour vérifier si l'utilisateur est participant à un message
    function isParticipant() {
      return isAuthenticated() && (
        request.auth.uid in resource.data.participants ||
        request.auth.uid == resource.data.senderId ||
        request.auth.uid == resource.data.recipientId
      );
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow list: if isAuthenticated();
    }

    // Règles pour les collections devis et projects
    match /{collection}/{docId} {
      allow read, list: if isAuthenticated() && (
        collection in ['devis', 'projects'] && (
          request.auth.uid == resource.data.userId || 
          request.auth.uid == resource.data.professionalId ||
          isProfessionnel() ||
          isAdmin()
        )
      );
      
      allow create: if isAuthenticated() && 
        collection in ['devis', 'projects'] &&
        ((isParticulier() && request.resource.data.userId == request.auth.uid) || 
         (isProfessionnel() && request.resource.data.professionalId == request.auth.uid) ||
         isAdmin());
      
      allow update: if isAuthenticated() && 
        collection in ['devis', 'projects'] && (
          request.auth.uid == resource.data.userId || 
          request.auth.uid == resource.data.professionalId ||
          isAdmin()
        );
      
      allow delete: if isAuthenticated() && 
        collection in ['devis', 'projects'] && (
          (isParticulier() && resource.data.userId == request.auth.uid) ||
          (isProfessionnel() && resource.data.professionalId == request.auth.uid) ||
          isAdmin()
        );
    }

    // Règles pour la collection messages
    match /messages/{messageId} {
      allow read, list: if isAuthenticated() && (
        isParticipant() ||
        isAdmin()
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.senderId == request.auth.uid ||
        request.auth.uid in request.resource.data.participants ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        isParticipant() ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        isParticipant() ||
        isAdmin()
      );
    }

    // Règles pour la collection contacts
    match /contacts/{contactId} {
      allow read, list: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.professionalId ||
        isAdmin()
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.professionalId ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }
  }
}

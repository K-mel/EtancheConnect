rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions de base
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.role;
    }

    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'administrateur';
    }

    function isMessageParticipant(messageData) {
      return request.auth.uid == messageData.senderId || 
             request.auth.uid == messageData.receiverId ||
             messageData.participants.hasAny([request.auth.uid]);
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }

    // Règles pour les messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        resource.data.senderId == request.auth.uid || 
        resource.data.receiverId == request.auth.uid ||
        resource.data.participants.hasAny([request.auth.uid])
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        isAdmin() || 
        isMessageParticipant(resource.data) ||
        (resource.data.receiverId == request.auth.uid && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']))
      );
      
      allow delete: if isAdmin();
    }

    // Règles pour la collection notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || isAdmin()
      );
      allow delete: if isAdmin();
    }

    // Règles pour la collection activites
    match /activites/{activiteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Règles pour la collection dashboard_data
    match /dashboard_data/{docId} {
      allow read: if isAuthenticated() && isAdmin();
      allow write: if isAdmin();
    }

    // Règles pour la collection devis
    match /devis/{devisId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Règles pour la collection projects
    match /projects/{projectId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Règles pour la collection devis_reponses
    match /devis_reponses/{devisReponseId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Règles pour la collection stats
    match /stats/{statId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Règles pour la collection deletedMessages
    match /deletedMessages/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
    }

    // Règle par défaut - Bloquer tout accès non explicitement autorisé
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}

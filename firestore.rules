rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions de base
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'administrateur';
    }

    function isProfessionnel() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professionnel';
    }

    function isParticulier() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'particulier';
    }

    // Fonction pour vérifier si l'utilisateur est participant à un message
    function isParticipant(data) {
      return isAuthenticated() && (
        request.auth.uid in data.participants ||
        request.auth.uid == data.senderId ||
        request.auth.uid == data.recipientId
      );
    }

    // Règles pour la collection userTokens
    match /userTokens/{userId} {
      allow read: if isAuthenticated() && (
        userId == request.auth.uid ||
        isAdmin()
      );
      allow write: if isAuthenticated() && (
        userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Règles pour la collection messages
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }

    // Règles pour la collection users
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated() && (
        isAdmin() || 
        request.auth.uid == userId
      );
      
      allow update: if isAuthenticated() && (
        (isAdmin() && (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'updatedAt']) ||
          isAdmin()
        )) ||
        request.auth.uid == userId
      );
      
      allow create: if isAuthenticated() && (
        request.auth.uid == userId ||
        isAdmin()
      );
      
      allow delete: if isAdmin();
    }

    // Règles pour la collection devis
    match /devis/{devisId} {
      allow read, list: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == resource.data.professionalId ||
        isProfessionnel() ||
        isAdmin()
      );
      
      allow create: if isAuthenticated() && (
        (isParticulier() && request.resource.data.userId == request.auth.uid) || 
        (isProfessionnel() && request.resource.data.professionalId == request.auth.uid) ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == resource.data.professionalId ||
        isProfessionnel() ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        (isParticulier() && resource.data.userId == request.auth.uid) ||
        (isProfessionnel() && resource.data.professionalId == request.auth.uid) ||
        isAdmin()
      );
    }

    // Règles pour la collection projects
    match /projects/{projectId} {
      allow read, list: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == resource.data.professionalId ||
        isProfessionnel() ||
        isAdmin()
      );
      
      allow create: if isAuthenticated() && (
        (isParticulier() && request.resource.data.userId == request.auth.uid) || 
        (isProfessionnel() && request.resource.data.professionalId == request.auth.uid) ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId || 
        request.auth.uid == resource.data.professionalId ||
        isProfessionnel() ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        (isParticulier() && resource.data.userId == request.auth.uid) ||
        (isProfessionnel() && resource.data.professionalId == request.auth.uid) ||
        isAdmin()
      );
    }

    // Règles pour la collection contacts
    match /contacts/{contactId} {
      allow read, list: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.professionalId ||
        isAdmin()
      );
      
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid == resource.data.professionalId ||
        isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAdmin()
      );
    }

    // Règles pour les notifications
    match /notifications/{notificationId} {
      // Permettre la lecture si :
      // 1. L'utilisateur est authentifié ET
      // 2. Soit c'est sa propre notification OU c'est un admin
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      // Permettre l'écriture si :
      // 1. L'utilisateur est authentifié ET
      // 2. Soit c'est sa propre notification OU c'est un admin
      allow write: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Règles pour la collection activites
    match /activites/{activiteId} {
      // Permettre la lecture si :
      // 1. L'utilisateur est authentifié ET
      // 2. Soit c'est un admin OU l'activité est liée à l'utilisateur
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );
      
      // Permettre l'écriture si :
      // 1. L'utilisateur est authentifié ET
      // 2. Soit c'est un admin OU l'activité est créée par l'utilisateur
      allow write: if isAuthenticated() && (
        isAdmin() ||
        request.resource.data.userId == request.auth.uid
      );
    }

    // Règles pour les statistiques
    match /stats/{statId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Règle par défaut pour les autres collections
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}
